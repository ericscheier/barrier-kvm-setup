## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##   https://flox.dev/docs/reference/command-reference/manifest.toml/
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
# Core networking and debugging tools (Linux-specific)
netcat.pkg-path = "netcat"
netcat.systems = ["x86_64-linux", "aarch64-linux"]
nmap.pkg-path = "nmap"
nmap.systems = ["x86_64-linux", "aarch64-linux"] 
tcpdump.pkg-path = "tcpdump"
tcpdump.systems = ["x86_64-linux", "aarch64-linux"]
strace.pkg-path = "strace"
strace.systems = ["x86_64-linux", "aarch64-linux"]
lsof.pkg-path = "lsof"
lsof.systems = ["x86_64-linux", "aarch64-linux"]
# Process and system monitoring (cross-platform)
htop.pkg-path = "htop"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# Polyglot-workbench integration variables
BARRIER_PROJECT_DIR = "$FLOX_ENV_PROJECT"
BARRIER_LOG_DIR = "$FLOX_ENV_PROJECT/logs"
BARRIER_PID_DIR = "$FLOX_ENV_PROJECT/.pids"

# Default Barrier configuration
BARRIER_SERVER_IP = "192.168.1.206"
BARRIER_PORT = "24800"
BARRIER_LOG_LEVEL = "INFO"

# Polyglot-workbench activation support
POLYGLOT_PROJECT_TYPE = "barrier-kvm"
POLYGLOT_ACTIVATION_READY = "true"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
  # Barrier project initialization
  echo "üöÄ Activating Barrier environment..."
  
  # Ensure required directories exist
  mkdir -p "$FLOX_ENV_PROJECT/logs"
  mkdir -p "$FLOX_ENV_PROJECT/.pids"
  
  # Set up proper DISPLAY if not set
  if [ -z "${DISPLAY:-}" ]; then
    export DISPLAY=":0"
    echo "üì∫ Set DISPLAY to :0"
  fi
  
  # Check if barrier is installed
  if ! command -v barrierc >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Barrier not found. Install with: sudo apt-get install barrier"
  else
    echo "‚úÖ Barrier ready: $(barrierc --version 2>&1 | head -1)"
  fi
  
  # Polyglot-workbench integration check
  if [ "${POLYGLOT_ACTIVATION:-}" = "true" ]; then
    echo "üîó Polyglot-workbench activation detected"
    
    # Auto-start services if configured
    if [ "${ACTIVATE_START_SERVICES:-false}" = "true" ]; then
      echo "üöÄ Auto-starting Barrier services..."
      "$FLOX_ENV_PROJECT/scripts/daemon-manager.sh" polyglot-start
      
      # Verify services started
      if [ "${ACTIVATE_VERIFY_SERVICES:-true}" = "true" ]; then
        sleep 3
        "$FLOX_ENV_PROJECT/scripts/daemon-manager.sh" polyglot-verify
      fi
    fi
  fi
  
  echo "üìÅ Project directory: $FLOX_ENV_PROJECT"
  echo "üîß Key commands:"
  echo "   ./setup.sh [server|client]           - Initial setup"
  echo "   ./scripts/verify-installation.sh     - Health checks"
  echo "   ./scripts/daemon-manager.sh start    - Start daemon services"
  echo "   ./scripts/discover-server.sh         - Find servers on network"
  echo "   ./scripts/cleanup.sh                 - Clean/reset installation"
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell-specific customizations such as setting aliases go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
# [build.myproject]
# description = "The coolest project ever"
# version = "0.0.1"
# command = """
#   mkdir -p $out/bin
#   cargo build --release
#   cp target/release/myproject $out/bin/myproject
# """


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
# systems = [
#   "aarch64-darwin",
#   "aarch64-linux",
#   "x86_64-darwin",
#   "x86_64-linux",
# ]
# Uncomment to disable CUDA detection.
# cuda-detection = false
